using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Npgsql;
using System.IO;
using System.Text.RegularExpressions;
using PostgreSQLCopyHelper;

namespace database_lab1
{
    class Program
    {
        public static string connstring = String.Format("Host={0};User Id={1};Password={2};Database={3};Port={4}", "db.mirvoda.com", "developer", "rtfP@ssw0rd", "dr_dk", "5454");

        class Movie
        {
            public Int32? Id { get; set; }
            public Int32? Year { get; set; }
            public String Name { get; set; }

            public static Movie FromCsv(string csvLine)
            {
                string[] values = csvLine.Split(',');
                var yearFinder = new Regex(@".+\((\d{4})\)");
                var match = yearFinder.Match(values[1]);
                var valuesYear = 1967;

                if (match.Success)
                {
                    valuesYear = int.Parse(match.Groups[1].Value);
                }

                Movie movieValues = new Movie();
                movieValues.Id = Convert.ToInt32(values[0]);
                movieValues.Year = Convert.ToInt32(valuesYear);
                movieValues.Name = Convert.ToString(values[1]);
                return movieValues;
            }

        }

    private static void loadMovies()
        {
            List<Movie> values = File.ReadAllLines("D:\\IMDB Movie Titles.csv")
                                           .Skip(1)
                                           .Select(v => Movie.FromCsv(v))
                                           .ToList();

            var copyHelper = new PostgreSQLCopyHelper<Movie>("public", "movies")
                            .MapInteger("id", x => x.Id)
                            .MapInteger("year", x => x.Year)
                            .MapText("name", x => x.Name)
                            ;

            using (var connection = new NpgsqlConnection(connstring))
            {
                try
                {
                    connection.Open();
                    copyHelper.SaveAll(connection, values);
                    int lineCount = values.Count();
                    Console.Write(lineCount + " Records Inserted!");
                    connection.Close();
                }
                catch (Exception er)
                {
                    Console.Write(er.Message);
                }
            }
        }

    private static void createDataBase()
    {
        try
        {
            using (var connection = new NpgsqlConnection(connstring))
            {
                connection.Open();
                using (var cmd = new NpgsqlCommand("CREATE DATABASE DR_DK WITH ENCODING = 'UTF8';", connection))
                {
                    cmd.ExecuteNonQuery();
                }
                connection.Close();
            }
        }
        catch (NpgsqlException ex)
        {
            Console.Write("Error. Code: {0}", ex.ErrorCode);
        }
    }

    private static void truncateMovies()
    {
        try
        {
            using (var connection = new NpgsqlConnection(connstring))
            {
                connection.Open();
                using (var cmd = new NpgsqlCommand("truncate table movies;", connection))
                {
                    cmd.ExecuteNonQuery();
                }
                connection.Close();
            }
        }
        catch (NpgsqlException ex)
        {
            Console.Write("Error. Code: {0}", ex.ErrorCode);
        }
    }

    private static void createMovies()
    {
        using (var connection = new NpgsqlConnection(connstring))
        {
            connection.Open();
            using (var cmd = new NpgsqlCommand("create table movies(id integer generated by default as identity primary key,year integer,name text); ", connection))
            {
                cmd.ExecuteNonQuery();
            }
            connection.Close();
        }
    }



        static void Main(string[] args)
        {
            //createDataBase();
            createMovies();
            loadMovies();
            //truncateMovies();

            NpgsqlConnection conn = new NpgsqlConnection(connstring);
            conn.Open();               
            NpgsqlCommand cmd = new NpgsqlCommand("select count(*) from public.movies; ", conn);
            NpgsqlDataReader dr = cmd.ExecuteReader();
            while (dr.Read()) Console.Write("{0}\n", dr[0]);
            conn.Close();

            Console.ReadLine();

        }
    }
}