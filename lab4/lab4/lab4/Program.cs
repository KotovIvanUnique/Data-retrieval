using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System;
using System.Collections.Generic;
using System.Linq;
using Npgsql;
using System.IO;
using System.Text.RegularExpressions;
using PostgreSQLCopyHelper;

namespace lab4
{
    class Program
    {
        public static string connstring = String.Format("Host={0};User Id={1};Password={2};Database={3};Port={4}", "db.mirvoda.com", "developer", "rtfP@ssw0rd", "dr_dk", "5454");

        class MovieAddInfo
        {
            public Int32 Id { get; set; }
            public Int32 Year { get; set; }
            public String Name { get; set; }

            public String Storyline { get; set; }
            public String Synopsis { get; set; }
            public Double Rating { get; set; }
            public String[] Directors { get; set; }
            public String[] Keywords { get; set; }
            public String[] Date_premiere { get; set; }
            public String[] Genres { get; set; }
            public String[] Stars { get; set; }

            public static MovieAddInfo FromCsv(string csvLine)
            {
                Regex reg = new Regex("[\\\"\n]");
                string new_csvLine = reg.Replace(csvLine, string.Empty);
                string[] values = new_csvLine.Split('|');

                MovieAddInfo MovieAddInfoValues = new MovieAddInfo();
                MovieAddInfoValues.Id = Convert.ToInt32(values[2]);
                MovieAddInfoValues.Rating = Convert.ToDouble(values[4].Replace('.', ','));
                MovieAddInfoValues.Storyline = Convert.ToString(values[6]);
                MovieAddInfoValues.Synopsis = Convert.ToString(values[7]);
                MovieAddInfoValues.Name = Convert.ToString(values[8]);
                MovieAddInfoValues.Year = Convert.ToInt32(values[10]);
                MovieAddInfoValues.Directors = values[0].Split(';');
                MovieAddInfoValues.Genres = values[1].Split(';');
                MovieAddInfoValues.Keywords = values[3].Split(';');
                MovieAddInfoValues.Date_premiere = values[5].Split(';');
                MovieAddInfoValues.Stars = values[9].Split(';');
                return MovieAddInfoValues;
            }
        }


        private static void createDataBase()
        {
            try
            {
                using (var connection = new NpgsqlConnection(connstring))
                {
                    using (var cmd = new NpgsqlCommand("CREATE DATABASE DR_DK WITH ENCODING = 'UTF8';", connection))
                    {
                        cmd.ExecuteNonQuery();
                    }
                }
            }
            catch (NpgsqlException ex)
            {
                Console.Write("Error. Code: {0}", ex.ErrorCode);
            }
        }

        private static void dropMoviesAddInfo()
        {
            using (var connection = new NpgsqlConnection(connstring))
            {
                connection.Open();
                using (var cmd = new NpgsqlCommand("drop table movies_addition_info;", connection))
                {
                    cmd.ExecuteNonQuery();
                }
                connection.Close();
            }
        }

        private static void truncateMoviesAddInfo()
        {
            try
            {
                using (var connection = new NpgsqlConnection(connstring))
                {
                    connection.Open();
                    using (var cmd = new NpgsqlCommand("truncate table movies_addition_info;", connection))
                    {
                        cmd.ExecuteNonQuery();
                    }
                    connection.Close();
                }
            }
            catch (NpgsqlException ex)
            {
                Console.Write("Error. Code: {0}", ex.ErrorCode);
            }
        }

        private static void createMoviesAddInfo()
        {
            using (var connection = new NpgsqlConnection(connstring))
            {
                connection.Open();
                using (var cmd = new NpgsqlCommand(
                    "create table movies_addition_info(id integer generated by default as identity primary key, year integer, name text, date_premiere text[],genres text[], directors text[], stars text[], storyline text, synopsis text, rating double precision, keywords text[]); ",
                    connection))
                {
                    cmd.ExecuteNonQuery();
                }
                connection.Close();
            }
        }

        private static void loadMoviesAddInfo()
        {
            List<MovieAddInfo> values = File.ReadAllLines(@"D:\imdb_full.csv")
                .Skip(1)
                .Select(v => MovieAddInfo.FromCsv(v))
                .ToList();

            var copyHelper = new PostgreSQLCopyHelper<MovieAddInfo>("public", "movies_addition_info")
                    .MapInteger("id", x => x.Id)
                    .MapInteger("year", x => x.Year)
                    .MapText("name", x => x.Name)
                    .MapText("storyline", x => x.Storyline)
                    .MapText("synopsis", x => x.Synopsis)
                    .MapDouble("rating", x => x.Rating)
                    .MapArray("directors", x => x.Directors)
                    .MapArray("date_premiere", x => x.Date_premiere)
                    .MapArray("stars", x => x.Stars)
                    .MapArray("genres", x => x.Genres)
                    .MapArray("keywords", x => x.Keywords)
                ;

            using (var connection = new NpgsqlConnection(connstring))
            {
                try
                {
                    connection.Open();
                    copyHelper.SaveAll(connection, values);
                    int lineCount = values.Count();
                    Console.Write(lineCount + " Records Inserted!");
                    connection.Close();
                }
                catch (Exception er)
                {
                    Console.Write(er.Message);
                }
            }
        }

        static void Main(string[] args)
        {
            //dropMoviesAddInfo();
            //truncateMoviesAddInfo();
            //createMoviesAddInfo();      
            //loadMoviesAddInfo();


            //tests
            NpgsqlConnection conn = new NpgsqlConnection(connstring);
            conn.Open();
            
            NpgsqlCommand cmd = new NpgsqlCommand("SELECT count(*) FROM public.movies_addition_info;", conn);
            NpgsqlDataReader dr = cmd.ExecuteReader();
            while (dr.Read()) Console.Write("{0}\n", dr[0]);
            //while (dr.Read()) Console.Write("{0},\t {1},\t {2}, \t{3}, \t{4}, \t{5}, \t{6}, \t{7}, \t{8}, \t{9}, \t{10}\n", dr[0], dr[1], dr[2], dr[3], dr[4], dr[5], dr[6], dr[7], dr[8], dr[9], dr[10]);
            //conn.Close();

            Console.ReadLine();

        }
    }
}



